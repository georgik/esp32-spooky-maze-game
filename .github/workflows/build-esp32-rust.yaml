name: Build ESP32 Rust Binaries in Docker image espressif/idf-rust:all_... and upload to Releases

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Upload to specific release"
        required: true
        default: 'v0.6.0'

jobs:
  get_release:
    name: Get release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.get_upload_url.outputs.url }}
    steps:
      - uses: octokit/request-action@v2.x
        id: get_release
        with:
          route: GET /repos/{owner}/{repo}/releases/tags/${{ github.event.inputs.release_tag }}
          owner: georgik
          repo: esp32-spooky-maze-game
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: get upload url
        id: get_upload_url
        run: |
          url=$(echo "$response" | jq -r '.upload_url' | sed 's/{?name,label}//')
          echo "::set-output name=url::$url"
        env:
          response: ${{ steps.get_release.outputs.data }}

  build:
    runs-on: ubuntu-20.04
    container:
      image: espressif/idf-rust:all_1.73.0.0
      options: --user esp --workdir /home/esp
    needs: get_release
    steps:
      - name: Clone repository with specific branch
        run: |
          export HOME=/home/esp
          cd /home/esp
          pwd
          git clone --depth 1 --branch ${{ github.ref_name }} https://github.com/georgik/esp32-spooky-maze-game.git project
      - name: Build and upload binaries
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Workaround GitHub issue with setting HOME in container https://github.com/actions/runner/issues/863
          export HOME=/home/esp
          cd /home/esp
          source /home/esp/.bashrc
          # Upload loop for each binary
          cd project
          for FIRMWARE_DIR in `ls -d esp* m5stack*`; do
            cd $FIRMWARE_DIR
            VERSION=$(grep '^version =' Cargo.toml | cut -d '"' -f2)
            CHIP=$(grep 'hal = { package =' Cargo.toml | cut -d '"' -f2 | cut -d '-' -f1)

            cargo espflash save-image --chip ${CHIP} --release --merge spooky-maze-${FIRMWARE_DIR}.bin

            asset_path="/home/esp/project/${FIRMWARE_DIR}/spooky-maze-${FIRMWARE_DIR}.bin"
            asset_name="spooky-maze-${FIRMWARE_DIR}-${{ github.event.inputs.release_tag }}.bin"
            curl \
              --request POST \
              --header "authorization: Bearer $GITHUB_TOKEN" \
              --header "Content-Type: application/octet-stream" \
              --data-binary "@$asset_path" \
              --url "${{ needs.get_release.outputs.upload_url }}?name=${asset_name}"
            cd -
          done
